#!/usr/bin/env bash
#
# Print battery status indicator - i.e:  90%.
# Intended to be used by status bars such as slstatus.
#
# Author: Mathias Estrup

set -euo pipefail

readonly BATTERY_NAME_REGEX="^[a-zA-Z0-9]{1,16}$"
readonly CAPACITY_REGEX="^[0-9]{1,3}$"

readonly STATUS_CHARGING="charging"
readonly STATUS_NOT_CHARGING="not charging"

readonly CHARGING_ICON=""
readonly CAPACITY_ICONS=(          )

# Use absolute paths to external binaries to avoid environment variable attacks
alias cat=/usr/bin/cat
alias echo=/usr/bin/echo
alias head=/usr/bin/head
alias tr=/usr/bin/tr
alias xargs=/usr/bin/xargs

function main() {
    if [ "$#" -ne 1 ]; then
        err "Usage: ./getbattery.sh BATTERY_NAME"
    fi

    local battery_name=$1
    validate_battery_name "$battery_name"

    local path="/sys/class/power_supply/$battery_name"

    local status
    status=$(get_status "$path/status")

    local capacity
    capacity=$(get_capacity "$path/capacity")

    local icon
    icon=$(get_icon "$status" "$capacity")

    echo "$icon $capacity%"
}

################################################################################
# Print given error message(s) and exit.
#
# Arguments:
#   One or more messages or arguments to print.
# Outputs:
#   Writes error messages/arguments to stderr.
# Returns:
#   Exits with 1.
################################################################################
function err() {
    echo "$@" >&2
    exit 1
}

################################################################################
# Validate a given battery name.
#
# Globals:
#   BATTERY_NAME_REGEX
# Arguments:
#   Battery name - i.e. "BAT0".
# Outputs:
#   Writes error message to stderr if battery name is invalid.
# Exits:
#   With 1 if validation fails.
################################################################################
function validate_battery_name() {
    local battery_name=$1

    if [[ ! "$battery_name" =~ $BATTERY_NAME_REGEX ]]; then
        err "Invalid battery name: \"$battery_name\"." \
            "Must consist of 1-16 alphanumeric characters."
    fi
}

################################################################################
# Gets current battery status.
#
# Automatically validates and sanitizes the status.
#
# Arguments:
#   Path to battery status file.
# Outputs:
#   Writes battery status (i.e. "charging"/"not charging") to stdout.
# Exits:
#   With 1 if given path does not point to a regular file.
################################################################################
function get_status() {
    local file=$1

    validate_file "$file" "battery status"

    local status
    status=$(head -c 32 "$file")
    status=$(sanitize_status "$status")

    echo "$status"
}

################################################################################
# Gets current battery capacity.
#
# Automatically sanitizes the capacity.
#
# Arguments:
#   Path to battery capacity file.
# Outputs:
#   Writes battery capacity in percent (i.e. "85") to stdout.
# Exits:
#   With 1 if given path does not point to a regular file.
################################################################################
function get_capacity() {
    local file=$1

    validate_file "$file" "battery capacity"

    local capacity
    capacity=$(head -c 3 "$file")
    capacity=$(sanitize_capacity "$capacity")

    echo "$capacity"
}

################################################################################
# Get an appropriate battery icon for a given status and capacity.
#
# Does NOT validate/sanitize arguments and as such, they should be
# validated/sanitized before calling this function.
#
# Globals:
#   CHARGING_ICON
#   CAPACITY_ICONS
# Arguments:
#   Battery status - i.e. "Charging"/"Not charging"/"Full".
#   Battery capacity percentage.
# Outputs:
#   Writes battery icon to stdout.
################################################################################
function get_icon() {
    local status=$1
    local capacity=$2

    if [ "$status" == "charging" ]; then
        echo "$CHARGING_ICON"
        return
    fi

    local index=$(( "$capacity" / 10 ))
    local icon="${CAPACITY_ICONS[$index]}"

    echo "$icon"
}

################################################################################
# Validates that a given path is a regular file.
#
# Arguments:
#   Path to validate.
#   Type of file as a string - i.e. "battery status". Used solely for error
#       message output.
# Exits:
#   With 1 if given path is not a regular file.
################################################################################
function validate_file() {
    local file=$1
    local type=$2

    if [ ! -f "$file" ]; then
        err "Invalid $type file: $file". \
            "It either does not exist or is not a regular file."
    fi
}

################################################################################
# Sanitize a given battery status.
#
# Does a case-insensitive comparison of given status with the string "charging"
# and assumes outputs "charging" if the comparison succeeds and "not charging"
# if it fails. As such, assumes that anything other than "charging" means that
# the battery is not charging.
#
# Globals:
#   STATUS_CHARGING
#   STATUS_NOT_CHARGING
# Arguments:
#   Battery status - i.e. "Charging"/"Not charging"/"Full".
# Outputs:
#   Writes "charging" or "not charging" to stdout.
################################################################################
function sanitize_status() {
    local status=$1
    status=$(trim "$status")
    status=$(tolower "$status")

    if [ "$status" != "$STATUS_CHARGING" ]; then
        status="$STATUS_NOT_CHARGING"
    fi

    echo "$status"
}

################################################################################
# Validate and sanitize a given battery capacity.
#
# Whitespace is trimmed and capacity is validated to be an int between 0 and
# 100 inclusive.
#
# Globals:
#   CAPACITY_REGEX
# Arguments:
#   Battery capacity.
# Outputs:
#   Writes sanitized capacity to stdout if validation succeeds.
#   Writes error message to stderr if validation fails.
# Exits:
#   With 1 if validation fails.
################################################################################
function sanitize_capacity() {
    local capacity=$1
    capacity=$(trim "$capacity")

    if [[ ! "$capacity" =~ $CAPACITY_REGEX ]] || [ "$capacity" -lt 0 ] \
        || [ "$capacity" -gt 100 ]; then
        err "Invalid battery capacity: \"$capacity\"." \
            "Must be a percentage (a number between 0 and 100 inclusive)."
    fi

    echo "$capacity"
}

################################################################################
# Trim whitespace from given strings.
#
# Leading and trailing whitespace is trimmed. Additionally, internal whitespace
# is trimmed to single spaces - i.e. "some  string" is trimmed to "some string".
# If multple strings are given, they will be concatenated into one string before
# trimming.
#
# Arguments:
#   One or more strings to trim.
# Outputs:
#   Writes trimmed string to stdout.
################################################################################
function trim() {
    echo "$@" | xargs
}

################################################################################
# Convert a given string to lower case.
#
# Arguments:
#   One or more strings to convert to lower case.
# Outputs:
#   Writes lower case strings to stdout.
################################################################################
function tolower() {
    echo "$@" | tr "[:upper:]" "[:lower:]"
}

main "$@"
